{"ast":null,"code":"var _jsxFileName = \"H:\\\\camera\\\\collage_bot\\\\project_root\\\\frontend\\\\src\\\\components\\\\AnimatedBackground.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AnimatedBackground = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const particlesRef = useRef([]);\n  const darkModeRef = useRef(window.matchMedia('(prefers-color-scheme: dark)').matches);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Set canvas size\n    const resizeCanvas = () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n    };\n    resizeCanvas();\n    window.addEventListener('resize', resizeCanvas);\n\n    // Detect dark mode changes\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleDarkModeChange = () => {\n      darkModeRef.current = mediaQuery.matches;\n      // Recreate particles to update their color\n      particlesRef.current = createParticles();\n    };\n    mediaQuery.addEventListener('change', handleDarkModeChange);\n\n    // Particle system\n    const particleCount = 50;\n    class Particle {\n      constructor() {\n        this.x = Math.random() * canvas.width;\n        this.y = Math.random() * canvas.height;\n        this.vx = (Math.random() - 0.5) * 0.5;\n        this.vy = (Math.random() - 0.5) * 0.5;\n        this.size = Math.random() * 3 + 1;\n        this.opacity = Math.random() * 0.5 + 0.1;\n        const isDark = darkModeRef.current;\n        this.color = isDark ? `hsl(${Math.random() * 60 + 200}, 70%, 70%)` // brighter for dark mode\n        : `hsl(${Math.random() * 60 + 200}, 70%, 50%)`; // softer for light mode\n      }\n      update() {\n        this.x += this.vx;\n        this.y += this.vy;\n\n        // Wrap around edges\n        if (this.x < 0) this.x = canvas.width;\n        if (this.x > canvas.width) this.x = 0;\n        if (this.y < 0) this.y = canvas.height;\n        if (this.y > canvas.height) this.y = 0;\n      }\n      draw() {\n        ctx.save();\n        ctx.globalAlpha = this.opacity;\n        ctx.fillStyle = this.color;\n        ctx.beginPath();\n        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\n        ctx.fill();\n        ctx.restore();\n      }\n    }\n    const createParticles = () => {\n      const p = [];\n      for (let i = 0; i < particleCount; i++) {\n        p.push(new Particle());\n      }\n      return p;\n    };\n    particlesRef.current = createParticles();\n\n    // Animation loop\n    const animate = () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      const particles = particlesRef.current;\n      particles.forEach(p => {\n        p.update();\n        p.draw();\n      });\n\n      // Draw connections\n      particles.forEach((p1, i) => {\n        for (let j = i + 1; j < particles.length; j++) {\n          const p2 = particles[j];\n          const dx = p1.x - p2.x;\n          const dy = p1.y - p2.y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n          if (distance < 100) {\n            ctx.save();\n            ctx.globalAlpha = (100 - distance) / 100 * 0.3;\n            ctx.strokeStyle = darkModeRef.current ? '#60a5fa' : '#3b82f6'; // blue-400 vs blue-500\n            ctx.lineWidth = 1;\n            ctx.beginPath();\n            ctx.moveTo(p1.x, p1.y);\n            ctx.lineTo(p2.x, p2.y);\n            ctx.stroke();\n            ctx.restore();\n          }\n        }\n      });\n      requestAnimationFrame(animate);\n    };\n    animate();\n    return () => {\n      window.removeEventListener('resize', resizeCanvas);\n      mediaQuery.removeEventListener('change', handleDarkModeChange);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    className: \"fixed inset-0 pointer-events-none z-0\",\n    style: {\n      opacity: 0.3,\n      backgroundColor: 'transparent'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n};\n_s(AnimatedBackground, \"sKNCOFKFoELstgxpQyceDuzzSDg=\");\n_c = AnimatedBackground;\nexport default AnimatedBackground;\nvar _c;\n$RefreshReg$(_c, \"AnimatedBackground\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","AnimatedBackground","_s","canvasRef","particlesRef","darkModeRef","window","matchMedia","matches","canvas","current","ctx","getContext","resizeCanvas","width","innerWidth","height","innerHeight","addEventListener","mediaQuery","handleDarkModeChange","createParticles","particleCount","Particle","constructor","x","Math","random","y","vx","vy","size","opacity","isDark","color","update","draw","save","globalAlpha","fillStyle","beginPath","arc","PI","fill","restore","p","i","push","animate","clearRect","particles","forEach","p1","j","length","p2","dx","dy","distance","sqrt","strokeStyle","lineWidth","moveTo","lineTo","stroke","requestAnimationFrame","removeEventListener","ref","className","style","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["H:/camera/collage_bot/project_root/frontend/src/components/AnimatedBackground.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\n\r\nconst AnimatedBackground = () => {\r\n  const canvasRef = useRef(null);\r\n  const particlesRef = useRef([]);\r\n  const darkModeRef = useRef(window.matchMedia('(prefers-color-scheme: dark)').matches);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n\r\n    // Set canvas size\r\n    const resizeCanvas = () => {\r\n      canvas.width = window.innerWidth;\r\n      canvas.height = window.innerHeight;\r\n    };\r\n\r\n    resizeCanvas();\r\n    window.addEventListener('resize', resizeCanvas);\r\n\r\n    // Detect dark mode changes\r\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\r\n    const handleDarkModeChange = () => {\r\n      darkModeRef.current = mediaQuery.matches;\r\n      // Recreate particles to update their color\r\n      particlesRef.current = createParticles();\r\n    };\r\n    mediaQuery.addEventListener('change', handleDarkModeChange);\r\n\r\n    // Particle system\r\n    const particleCount = 50;\r\n\r\n    class Particle {\r\n      constructor() {\r\n        this.x = Math.random() * canvas.width;\r\n        this.y = Math.random() * canvas.height;\r\n        this.vx = (Math.random() - 0.5) * 0.5;\r\n        this.vy = (Math.random() - 0.5) * 0.5;\r\n        this.size = Math.random() * 3 + 1;\r\n        this.opacity = Math.random() * 0.5 + 0.1;\r\n        const isDark = darkModeRef.current;\r\n        this.color = isDark\r\n          ? `hsl(${Math.random() * 60 + 200}, 70%, 70%)` // brighter for dark mode\r\n          : `hsl(${Math.random() * 60 + 200}, 70%, 50%)`; // softer for light mode\r\n      }\r\n\r\n      update() {\r\n        this.x += this.vx;\r\n        this.y += this.vy;\r\n\r\n        // Wrap around edges\r\n        if (this.x < 0) this.x = canvas.width;\r\n        if (this.x > canvas.width) this.x = 0;\r\n        if (this.y < 0) this.y = canvas.height;\r\n        if (this.y > canvas.height) this.y = 0;\r\n      }\r\n\r\n      draw() {\r\n        ctx.save();\r\n        ctx.globalAlpha = this.opacity;\r\n        ctx.fillStyle = this.color;\r\n        ctx.beginPath();\r\n        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\r\n        ctx.fill();\r\n        ctx.restore();\r\n      }\r\n    }\r\n\r\n    const createParticles = () => {\r\n      const p = [];\r\n      for (let i = 0; i < particleCount; i++) {\r\n        p.push(new Particle());\r\n      }\r\n      return p;\r\n    };\r\n\r\n    particlesRef.current = createParticles();\r\n\r\n    // Animation loop\r\n    const animate = () => {\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n      const particles = particlesRef.current;\r\n\r\n      particles.forEach(p => {\r\n        p.update();\r\n        p.draw();\r\n      });\r\n\r\n      // Draw connections\r\n      particles.forEach((p1, i) => {\r\n        for (let j = i + 1; j < particles.length; j++) {\r\n          const p2 = particles[j];\r\n          const dx = p1.x - p2.x;\r\n          const dy = p1.y - p2.y;\r\n          const distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n          if (distance < 100) {\r\n            ctx.save();\r\n            ctx.globalAlpha = (100 - distance) / 100 * 0.3;\r\n            ctx.strokeStyle = darkModeRef.current ? '#60a5fa' : '#3b82f6'; // blue-400 vs blue-500\r\n            ctx.lineWidth = 1;\r\n            ctx.beginPath();\r\n            ctx.moveTo(p1.x, p1.y);\r\n            ctx.lineTo(p2.x, p2.y);\r\n            ctx.stroke();\r\n            ctx.restore();\r\n          }\r\n        }\r\n      });\r\n\r\n      requestAnimationFrame(animate);\r\n    };\r\n\r\n    animate();\r\n\r\n    return () => {\r\n      window.removeEventListener('resize', resizeCanvas);\r\n      mediaQuery.removeEventListener('change', handleDarkModeChange);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      className=\"fixed inset-0 pointer-events-none z-0\"\r\n      style={{ opacity: 0.3, backgroundColor: 'transparent' }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default AnimatedBackground;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}