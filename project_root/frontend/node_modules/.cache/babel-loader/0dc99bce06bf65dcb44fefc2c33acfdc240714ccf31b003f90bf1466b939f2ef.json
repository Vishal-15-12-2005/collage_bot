{"ast":null,"code":"export function speakWithAudioFeedback(text, onVolumeChange, onEnd) {\n  const utter = new SpeechSynthesisUtterance(text);\n  const synth = window.speechSynthesis;\n  const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n  const analyser = audioCtx.createAnalyser();\n  analyser.fftSize = 128;\n  const bufferLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(bufferLength);\n  const source = audioCtx.createMediaStreamSource(audioCtx.createMediaStreamDestination().stream);\n  source.connect(analyser);\n  const interval = setInterval(() => {\n    analyser.getByteFrequencyData(dataArray);\n    const avg = dataArray.reduce((a, b) => a + b, 0) / bufferLength;\n    const norm = Math.min(1, avg / 255);\n    onVolumeChange(norm);\n  }, 100);\n  utter.onend = () => {\n    clearInterval(interval);\n    onVolumeChange(0);\n    onEnd();\n    audioCtx.close();\n  };\n  synth.speak(utter);\n}","map":{"version":3,"names":["speakWithAudioFeedback","text","onVolumeChange","onEnd","utter","SpeechSynthesisUtterance","synth","window","speechSynthesis","audioCtx","AudioContext","webkitAudioContext","analyser","createAnalyser","fftSize","bufferLength","frequencyBinCount","dataArray","Uint8Array","source","createMediaStreamSource","createMediaStreamDestination","stream","connect","interval","setInterval","getByteFrequencyData","avg","reduce","a","b","norm","Math","min","onend","clearInterval","close","speak"],"sources":["H:/camera/project_root/frontend/src/utils/voice.js"],"sourcesContent":["export function speakWithAudioFeedback(text, onVolumeChange, onEnd) {\r\n  const utter = new SpeechSynthesisUtterance(text);\r\n  const synth = window.speechSynthesis;\r\n\r\n  const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\r\n  const analyser = audioCtx.createAnalyser();\r\n  analyser.fftSize = 128;\r\n  const bufferLength = analyser.frequencyBinCount;\r\n  const dataArray = new Uint8Array(bufferLength);\r\n\r\n  const source = audioCtx.createMediaStreamSource(audioCtx.createMediaStreamDestination().stream);\r\n  source.connect(analyser);\r\n\r\n  const interval = setInterval(() => {\r\n    analyser.getByteFrequencyData(dataArray);\r\n    const avg = dataArray.reduce((a, b) => a + b, 0) / bufferLength;\r\n    const norm = Math.min(1, avg / 255);\r\n    onVolumeChange(norm);\r\n  }, 100);\r\n\r\n  utter.onend = () => {\r\n    clearInterval(interval);\r\n    onVolumeChange(0);\r\n    onEnd();\r\n    audioCtx.close();\r\n  };\r\n\r\n  synth.speak(utter);\r\n}\r\n"],"mappings":"AAAA,OAAO,SAASA,sBAAsBA,CAACC,IAAI,EAAEC,cAAc,EAAEC,KAAK,EAAE;EAClE,MAAMC,KAAK,GAAG,IAAIC,wBAAwB,CAACJ,IAAI,CAAC;EAChD,MAAMK,KAAK,GAAGC,MAAM,CAACC,eAAe;EAEpC,MAAMC,QAAQ,GAAG,KAAKF,MAAM,CAACG,YAAY,IAAIH,MAAM,CAACI,kBAAkB,EAAE,CAAC;EACzE,MAAMC,QAAQ,GAAGH,QAAQ,CAACI,cAAc,CAAC,CAAC;EAC1CD,QAAQ,CAACE,OAAO,GAAG,GAAG;EACtB,MAAMC,YAAY,GAAGH,QAAQ,CAACI,iBAAiB;EAC/C,MAAMC,SAAS,GAAG,IAAIC,UAAU,CAACH,YAAY,CAAC;EAE9C,MAAMI,MAAM,GAAGV,QAAQ,CAACW,uBAAuB,CAACX,QAAQ,CAACY,4BAA4B,CAAC,CAAC,CAACC,MAAM,CAAC;EAC/FH,MAAM,CAACI,OAAO,CAACX,QAAQ,CAAC;EAExB,MAAMY,QAAQ,GAAGC,WAAW,CAAC,MAAM;IACjCb,QAAQ,CAACc,oBAAoB,CAACT,SAAS,CAAC;IACxC,MAAMU,GAAG,GAAGV,SAAS,CAACW,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,EAAE,CAAC,CAAC,GAAGf,YAAY;IAC/D,MAAMgB,IAAI,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEN,GAAG,GAAG,GAAG,CAAC;IACnCzB,cAAc,CAAC6B,IAAI,CAAC;EACtB,CAAC,EAAE,GAAG,CAAC;EAEP3B,KAAK,CAAC8B,KAAK,GAAG,MAAM;IAClBC,aAAa,CAACX,QAAQ,CAAC;IACvBtB,cAAc,CAAC,CAAC,CAAC;IACjBC,KAAK,CAAC,CAAC;IACPM,QAAQ,CAAC2B,KAAK,CAAC,CAAC;EAClB,CAAC;EAED9B,KAAK,CAAC+B,KAAK,CAACjC,KAAK,CAAC;AACpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}