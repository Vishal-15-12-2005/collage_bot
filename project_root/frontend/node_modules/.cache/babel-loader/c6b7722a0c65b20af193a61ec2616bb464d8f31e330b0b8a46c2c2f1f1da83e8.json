{"ast":null,"code":"let speechRecognition;\nlet listening = false;\nlet shouldAlwaysListen = true;\nexport function initSpeechRecognition(onTranscript) {\n  const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n  if (!SpeechRecognition) {\n    console.error(\"Speech Recognition not supported\");\n    return null;\n  }\n  if (!speechRecognition) {\n    speechRecognition = new SpeechRecognition();\n    speechRecognition.continuous = true;\n    speechRecognition.interimResults = true;\n    speechRecognition.lang = 'en-US';\n    speechRecognition.onresult = event => {\n      const results = Array.from(event.results);\n      const transcript = results.map(r => r[0].transcript).join('').trim();\n      const isFinal = results[results.length - 1].isFinal;\n      if (!transcript) return;\n\n      // 🧠 Interrupt speech if speaking\n      if (!isFinal && window.speechSynthesis.speaking) {\n        console.log('🔇 Interrupting speech...');\n        window.speechSynthesis.cancel();\n        if (onTranscript) onTranscript(transcript, true); // handle as final\n        return;\n      }\n      if (onTranscript) onTranscript(transcript, isFinal);\n    };\n    speechRecognition.onerror = e => {\n      console.error('SpeechRecognition Error:', e);\n      listening = false;\n      if (shouldAlwaysListen) {\n        console.log('🔁 Restarting mic after error...');\n        setTimeout(() => startListening(onTranscript), 1000);\n      }\n    };\n    speechRecognition.onend = () => {\n      listening = false;\n      if (shouldAlwaysListen) {\n        console.warn('🎤 Mic ended. Restarting...');\n        setTimeout(() => startListening(onTranscript), 100);\n      }\n    };\n  }\n  return speechRecognition;\n}\nexport function startListening(onTranscript) {\n  shouldAlwaysListen = true;\n  const recognition = initSpeechRecognition(onTranscript);\n  if (!recognition || listening) return;\n  try {\n    recognition.start();\n    listening = true;\n    console.log('🎙️ Mic started');\n  } catch (err) {\n    console.warn('Mic already running or start failed:', err);\n  }\n}\nexport function stopListening() {\n  shouldAlwaysListen = false;\n  if (speechRecognition && listening) {\n    speechRecognition.stop();\n    listening = false;\n    console.log('🛑 Mic stopped manually');\n  }\n}\nexport function speakWithAudioFeedback(text, setVolume, onEnd, onTranscript) {\n  const synth = window.speechSynthesis;\n  if (!synth) return;\n  synth.cancel(); // cancel any previous speech\n\n  const utter = new SpeechSynthesisUtterance(text);\n  utter.lang = 'en-US';\n  let volInterval;\n  utter.onstart = () => {\n    volInterval = setInterval(() => {\n      const fakeVol = Math.random();\n      setVolume(fakeVol);\n    }, 100);\n  };\n  utter.onend = () => {\n    clearInterval(volInterval);\n    setVolume(0);\n    if (onEnd) onEnd();\n\n    // 🔁 Restart mic after speech ends\n    if (shouldAlwaysListen && onTranscript) {\n      startListening(onTranscript);\n    }\n  };\n  utter.onerror = err => {\n    console.error('🔴 SpeechSynthesis error:', err);\n    clearInterval(volInterval);\n    setVolume(0);\n    if (onEnd) onEnd();\n    if (shouldAlwaysListen && onTranscript) {\n      startListening(onTranscript);\n    }\n  };\n  synth.speak(utter);\n}\nexport function stopSpeaking() {\n  if (window.speechSynthesis && window.speechSynthesis.speaking) {\n    window.speechSynthesis.cancel();\n    console.log('🔇 Speech stopped');\n  }\n}","map":{"version":3,"names":["speechRecognition","listening","shouldAlwaysListen","initSpeechRecognition","onTranscript","SpeechRecognition","window","webkitSpeechRecognition","console","error","continuous","interimResults","lang","onresult","event","results","Array","from","transcript","map","r","join","trim","isFinal","length","speechSynthesis","speaking","log","cancel","onerror","e","setTimeout","startListening","onend","warn","recognition","start","err","stopListening","stop","speakWithAudioFeedback","text","setVolume","onEnd","synth","utter","SpeechSynthesisUtterance","volInterval","onstart","setInterval","fakeVol","Math","random","clearInterval","speak","stopSpeaking"],"sources":["D:/project_root/collage_bot/project_root/frontend/src/utils/voice.js"],"sourcesContent":["let speechRecognition;\r\nlet listening = false;\r\nlet shouldAlwaysListen = true;\r\n\r\nexport function initSpeechRecognition(onTranscript) {\r\n  const SpeechRecognition =\r\n    window.SpeechRecognition || window.webkitSpeechRecognition;\r\n\r\n  if (!SpeechRecognition) {\r\n    console.error(\"Speech Recognition not supported\");\r\n    return null;\r\n  }\r\n\r\n  if (!speechRecognition) {\r\n    speechRecognition = new SpeechRecognition();\r\n    speechRecognition.continuous = true;\r\n    speechRecognition.interimResults = true;\r\n    speechRecognition.lang = 'en-US';\r\n\r\n    speechRecognition.onresult = (event) => {\r\n      const results = Array.from(event.results);\r\n      const transcript = results.map(r => r[0].transcript).join('').trim();\r\n      const isFinal = results[results.length - 1].isFinal;\r\n\r\n      if (!transcript) return;\r\n\r\n      // 🧠 Interrupt speech if speaking\r\n      if (!isFinal && window.speechSynthesis.speaking) {\r\n        console.log('🔇 Interrupting speech...');\r\n        window.speechSynthesis.cancel();\r\n        if (onTranscript) onTranscript(transcript, true); // handle as final\r\n        return;\r\n      }\r\n\r\n      if (onTranscript) onTranscript(transcript, isFinal);\r\n    };\r\n\r\n    speechRecognition.onerror = (e) => {\r\n      console.error('SpeechRecognition Error:', e);\r\n      listening = false;\r\n      if (shouldAlwaysListen) {\r\n        console.log('🔁 Restarting mic after error...');\r\n        setTimeout(() => startListening(onTranscript), 1000);\r\n      }\r\n    };\r\n\r\n    speechRecognition.onend = () => {\r\n      listening = false;\r\n      if (shouldAlwaysListen) {\r\n        console.warn('🎤 Mic ended. Restarting...');\r\n        setTimeout(() => startListening(onTranscript), 100);\r\n      }\r\n    };\r\n  }\r\n\r\n  return speechRecognition;\r\n}\r\n\r\nexport function startListening(onTranscript) {\r\n  shouldAlwaysListen = true;\r\n\r\n  const recognition = initSpeechRecognition(onTranscript);\r\n  if (!recognition || listening) return;\r\n\r\n  try {\r\n    recognition.start();\r\n    listening = true;\r\n    console.log('🎙️ Mic started');\r\n  } catch (err) {\r\n    console.warn('Mic already running or start failed:', err);\r\n  }\r\n}\r\n\r\nexport function stopListening() {\r\n  shouldAlwaysListen = false;\r\n  if (speechRecognition && listening) {\r\n    speechRecognition.stop();\r\n    listening = false;\r\n    console.log('🛑 Mic stopped manually');\r\n  }\r\n}\r\n\r\nexport function speakWithAudioFeedback(text, setVolume, onEnd, onTranscript) {\r\n  const synth = window.speechSynthesis;\r\n  if (!synth) return;\r\n\r\n  synth.cancel(); // cancel any previous speech\r\n\r\n  const utter = new SpeechSynthesisUtterance(text);\r\n  utter.lang = 'en-US';\r\n\r\n  let volInterval;\r\n\r\n  utter.onstart = () => {\r\n    volInterval = setInterval(() => {\r\n      const fakeVol = Math.random();\r\n      setVolume(fakeVol);\r\n    }, 100);\r\n  };\r\n\r\n  utter.onend = () => {\r\n    clearInterval(volInterval);\r\n    setVolume(0);\r\n    if (onEnd) onEnd();\r\n\r\n    // 🔁 Restart mic after speech ends\r\n    if (shouldAlwaysListen && onTranscript) {\r\n      startListening(onTranscript);\r\n    }\r\n  };\r\n\r\n  utter.onerror = (err) => {\r\n    console.error('🔴 SpeechSynthesis error:', err);\r\n    clearInterval(volInterval);\r\n    setVolume(0);\r\n    if (onEnd) onEnd();\r\n\r\n    if (shouldAlwaysListen && onTranscript) {\r\n      startListening(onTranscript);\r\n    }\r\n  };\r\n\r\n  synth.speak(utter);\r\n}\r\n\r\nexport function stopSpeaking() {\r\n  if (window.speechSynthesis && window.speechSynthesis.speaking) {\r\n    window.speechSynthesis.cancel();\r\n    console.log('🔇 Speech stopped');\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}